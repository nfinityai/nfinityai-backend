version: '3.8'

services:
  backend_api:
    build:
      context: backend_api/
      dockerfile: docker/Dockerfile
    ports:
      - "${BACKEND_API_PORT:-8000}:8000"
    environment:
      - BACKEND_API_SECRET_KEY=${BACKEND_API_SECRET_KEY}
      - BACKEND_API_JWT_SECRET=${BACKEND_API_JWT_SECRET}
      - BACKEND_API_DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:5432/${POSTGRES_DB}
      - BACKEND_API_PROVIDER_API_URL=http://provider_api_gateway:8000
      - BACKEND_API_PROVIDER_NAME=replicate
      - BACKEND_API_ADMIN_USERNAME=${BACKEND_API_ADMIN_USERNAME}
      - BACKEND_API_ADMIN_PASSWORD=${BACKEND_API_ADMIN_PASSWORD}
      - BACKEND_API_INFURA_BASE_URL=${BACKEND_API_INFURA_BASE_URL}
      - BACKEND_API_CONTRACT_ADDRESS=${BACKEND_API_CONTRACT_ADDRESS}
      - BACKEND_API_COINGECKO_API_KEY=${BACKEND_API_COINGECKO_API_KEY}
      - BACKEND_API_ETHERSCAN_API_KEY=${BACKEND_API_ETHERSCAN_API_KEY}
      - BACKEND_API_NFNT_CONTRACT_ADDRESS=${BACKEND_API_NFNT_CONTRACT_ADDRESS}
      - BACKEND_API_MEDIA_UPLOAD_DIR=/app/media
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-.}/backend_media:/app/media
    depends_on:
      - db
      - provider_api_gateway
    networks:
      - webnet

  provider_api_gateway:
    build:
      context: provider_api_gateway/
      dockerfile: docker/Dockerfile
    expose:
      - 8000
    environment:
      - REPLICATE_API_TOKEN=${PROVIDER_REPLICATE_API_TOKEN}
    depends_on:
      - db
    networks:
      - webnet

  db:
    image: postgres:12
    expose:
      - 5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - webnet

  nginx:
    image: nginx:latest
    container_name: nginx_server
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./html:/usr/share/nginx/html
      - /etc/letsencrypt:/etc/letsencrypt
      - ./certs-data:/data/letsencrypt
      - ./logs:/var/log/nginx
    depends_on:
      - backend_api
      - provider_api_gateway
    networks:
      - webnet

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - ./certs-data:/data/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
    depends_on:
      - nginx
    networks:
      - webnet

networks:
  webnet:
    driver: bridge

volumes:
  pg_data:
